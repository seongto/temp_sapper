import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, v as validate_slots, e as element, a as space, t as text, q as query_selector_all, c as claim_element, b as detach_dev, f as claim_space, h as children, j as claim_text, k as attr_dev, l as add_location, m as append_dev, p as insert_dev, n as noop } from './client.fdf18512.js';

/* src/routes/blog/index.svelte generated by Svelte v3.25.1 */

const file = "src/routes/blog/index.svelte";

function create_fragment(ctx) {
	let meta0;
	let meta1;
	let meta2;
	let meta3;
	let meta4;
	let meta5;
	let meta6;
	let meta7;
	let meta8;
	let meta9;
	let meta10;
	let link;
	let t0;
	let h1;
	let t1;

	const block = {
		c: function create() {
			meta0 = element("meta");
			meta1 = element("meta");
			meta2 = element("meta");
			meta3 = element("meta");
			meta4 = element("meta");
			meta5 = element("meta");
			meta6 = element("meta");
			meta7 = element("meta");
			meta8 = element("meta");
			meta9 = element("meta");
			meta10 = element("meta");
			link = element("link");
			t0 = space();
			h1 = element("h1");
			t1 = text("인덱스다앗!!");
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-417l92\"]", document.head);
			meta0 = claim_element(head_nodes, "META", { name: true, content: true });
			meta1 = claim_element(head_nodes, "META", { property: true, content: true });
			meta2 = claim_element(head_nodes, "META", { property: true, content: true });
			meta3 = claim_element(head_nodes, "META", { name: true, content: true });
			meta4 = claim_element(head_nodes, "META", { property: true, content: true });
			meta5 = claim_element(head_nodes, "META", { property: true, content: true });
			meta6 = claim_element(head_nodes, "META", { property: true, content: true });
			meta7 = claim_element(head_nodes, "META", { property: true, content: true });
			meta8 = claim_element(head_nodes, "META", { property: true, content: true });
			meta9 = claim_element(head_nodes, "META", { property: true, content: true });
			meta10 = claim_element(head_nodes, "META", { property: true, content: true });
			link = claim_element(head_nodes, "LINK", { rel: true, type: true, href: true });
			head_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			h1 = claim_element(nodes, "H1", {});
			var h1_nodes = children(h1);
			t1 = claim_text(h1_nodes, "인덱스다앗!!");
			h1_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			document.title = "allius 블로그 인덱스";
			attr_dev(meta0, "name", "title");
			attr_dev(meta0, "content", "allius blog인덱스");
			add_location(meta0, file, 7, 4, 72);
			attr_dev(meta1, "property", "og:title");
			attr_dev(meta1, "content", "allius blog");
			add_location(meta1, file, 8, 4, 123);
			attr_dev(meta2, "property", "twitter:title");
			attr_dev(meta2, "content", "allius blog");
			add_location(meta2, file, 9, 4, 178);
			attr_dev(meta3, "name", "description");
			attr_dev(meta3, "content", "나의 브랜드로 만드는 기회");
			add_location(meta3, file, 10, 4, 238);
			attr_dev(meta4, "property", "og:description");
			attr_dev(meta4, "content", "나의 브랜드로 만드는 기회");
			add_location(meta4, file, 11, 4, 295);
			attr_dev(meta5, "property", "twitter:description");
			attr_dev(meta5, "content", "나의 브랜드로 만드는 기회");
			add_location(meta5, file, 12, 4, 359);
			attr_dev(meta6, "property", "og:image");
			attr_dev(meta6, "content", "https://allius-images.s3.ap-northeast-2.amazonaws.com/static-images/meta_img_01.jpg");
			add_location(meta6, file, 13, 4, 428);
			attr_dev(meta7, "property", "twitter:image");
			attr_dev(meta7, "content", "https://allius-images.s3.ap-northeast-2.amazonaws.com/static-images/meta_img_01.jpg");
			add_location(meta7, file, 14, 4, 555);
			attr_dev(meta8, "property", "og:image:alt");
			attr_dev(meta8, "content", "나의 브랜드로 만드는 기회");
			add_location(meta8, file, 18, 4, 699);
			attr_dev(meta9, "property", "twitter:image:alt");
			attr_dev(meta9, "content", "나의 브랜드로 만드는 기회");
			add_location(meta9, file, 19, 4, 761);
			attr_dev(meta10, "property", "og:type");
			attr_dev(meta10, "content", "website");
			add_location(meta10, file, 20, 4, 828);
			attr_dev(link, "rel", "icon");
			attr_dev(link, "type", "image/png");
			attr_dev(link, "href", "/allius-favicon-01.png");
			add_location(link, file, 21, 1, 875);
			add_location(h1, file, 24, 0, 956);
		},
		m: function mount(target, anchor) {
			append_dev(document.head, meta0);
			append_dev(document.head, meta1);
			append_dev(document.head, meta2);
			append_dev(document.head, meta3);
			append_dev(document.head, meta4);
			append_dev(document.head, meta5);
			append_dev(document.head, meta6);
			append_dev(document.head, meta7);
			append_dev(document.head, meta8);
			append_dev(document.head, meta9);
			append_dev(document.head, meta10);
			append_dev(document.head, link);
			insert_dev(target, t0, anchor);
			insert_dev(target, h1, anchor);
			append_dev(h1, t1);
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			detach_dev(meta0);
			detach_dev(meta1);
			detach_dev(meta2);
			detach_dev(meta3);
			detach_dev(meta4);
			detach_dev(meta5);
			detach_dev(meta6);
			detach_dev(meta7);
			detach_dev(meta8);
			detach_dev(meta9);
			detach_dev(meta10);
			detach_dev(link);
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(h1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Blog", slots, []);
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Blog> was created with unknown prop '${key}'`);
	});

	return [];
}

class Blog extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Blog",
			options,
			id: create_fragment.name
		});
	}
}

export default Blog;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguMzVjNjZkNTMuanMiLCJzb3VyY2VzIjpbXSwic291cmNlc0NvbnRlbnQiOltdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsifQ==
